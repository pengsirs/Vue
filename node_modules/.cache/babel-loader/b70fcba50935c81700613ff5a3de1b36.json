{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { brush, setClipPath } from './graphic.js';\nimport { createElement, createVNode, vNodeToString, getCssString, createBrushScope, createSVGVNode } from './core.js';\nimport { normalizeColor, encodeBase64 } from './helper.js';\nimport { extend, keys, logError, map, retrieve2 } from '../core/util.js';\nimport patch, { updateAttrs } from './patch.js';\nimport { getSize } from '../canvas/helper.js';\nvar svgId = 0;\nvar SVGPainter = function () {\n  function SVGPainter(root, storage, opts) {\n    this.type = 'svg';\n    this.refreshHover = createMethodNotSupport('refreshHover');\n    this.configLayer = createMethodNotSupport('configLayer');\n    this.storage = storage;\n    this._opts = opts = extend({}, opts);\n    this.root = root;\n    this._id = 'zr' + svgId++;\n    this._oldVNode = createSVGVNode(opts.width, opts.height);\n    if (root && !opts.ssr) {\n      var viewport = this._viewport = document.createElement('div');\n      viewport.style.cssText = 'position:relative;overflow:hidden';\n      var svgDom = this._svgDom = this._oldVNode.elm = createElement('svg');\n      updateAttrs(null, this._oldVNode);\n      viewport.appendChild(svgDom);\n      root.appendChild(viewport);\n    }\n    this.resize(opts.width, opts.height);\n  }\n  SVGPainter.prototype.getType = function () {\n    return this.type;\n  };\n  SVGPainter.prototype.getViewportRoot = function () {\n    return this._viewport;\n  };\n  SVGPainter.prototype.getViewportRootOffset = function () {\n    var viewportRoot = this.getViewportRoot();\n    if (viewportRoot) {\n      return {\n        offsetLeft: viewportRoot.offsetLeft || 0,\n        offsetTop: viewportRoot.offsetTop || 0\n      };\n    }\n  };\n  SVGPainter.prototype.getSvgDom = function () {\n    return this._svgDom;\n  };\n  SVGPainter.prototype.refresh = function () {\n    if (this.root) {\n      var vnode = this.renderToVNode({\n        willUpdate: true\n      });\n      vnode.attrs.style = 'position:absolute;left:0;top:0;user-select:none';\n      patch(this._oldVNode, vnode);\n      this._oldVNode = vnode;\n    }\n  };\n  SVGPainter.prototype.renderOneToVNode = function (el) {\n    return brush(el, createBrushScope(this._id));\n  };\n  SVGPainter.prototype.renderToVNode = function (opts) {\n    opts = opts || {};\n    var list = this.storage.getDisplayList(true);\n    var bgColor = this._backgroundColor;\n    var width = this._width;\n    var height = this._height;\n    var scope = createBrushScope(this._id);\n    scope.animation = opts.animation;\n    scope.willUpdate = opts.willUpdate;\n    scope.compress = opts.compress;\n    var children = [];\n    if (bgColor && bgColor !== 'none') {\n      var _a = normalizeColor(bgColor),\n        color = _a.color,\n        opacity = _a.opacity;\n      this._bgVNode = createVNode('rect', 'bg', {\n        width: width,\n        height: height,\n        x: '0',\n        y: '0',\n        id: '0',\n        fill: color,\n        'fill-opacity': opacity\n      });\n      children.push(this._bgVNode);\n    } else {\n      this._bgVNode = null;\n    }\n    var mainVNode = !opts.compress ? this._mainVNode = createVNode('g', 'main', {}, []) : null;\n    this._paintList(list, scope, mainVNode ? mainVNode.children : children);\n    mainVNode && children.push(mainVNode);\n    var defs = map(keys(scope.defs), function (id) {\n      return scope.defs[id];\n    });\n    if (defs.length) {\n      children.push(createVNode('defs', 'defs', {}, defs));\n    }\n    if (opts.animation) {\n      var animationCssStr = getCssString(scope.cssNodes, scope.cssAnims, {\n        newline: true\n      });\n      if (animationCssStr) {\n        var styleNode = createVNode('style', 'stl', {}, [], animationCssStr);\n        children.push(styleNode);\n      }\n    }\n    return createSVGVNode(width, height, children, opts.useViewBox);\n  };\n  SVGPainter.prototype.renderToString = function (opts) {\n    opts = opts || {};\n    return vNodeToString(this.renderToVNode({\n      animation: retrieve2(opts.cssAnimation, true),\n      willUpdate: false,\n      compress: true,\n      useViewBox: retrieve2(opts.useViewBox, true)\n    }), {\n      newline: true\n    });\n  };\n  SVGPainter.prototype.setBackgroundColor = function (backgroundColor) {\n    this._backgroundColor = backgroundColor;\n    var bgVNode = this._bgVNode;\n    if (bgVNode && bgVNode.elm) {\n      var _a = normalizeColor(backgroundColor),\n        color = _a.color,\n        opacity = _a.opacity;\n      bgVNode.elm.setAttribute('fill', color);\n      if (opacity < 1) {\n        bgVNode.elm.setAttribute('fill-opacity', opacity);\n      }\n    }\n  };\n  SVGPainter.prototype.getSvgRoot = function () {\n    return this._mainVNode && this._mainVNode.elm;\n  };\n  SVGPainter.prototype._paintList = function (list, scope, out) {\n    var listLen = list.length;\n    var clipPathsGroupsStack = [];\n    var clipPathsGroupsStackDepth = 0;\n    var currentClipPathGroup;\n    var prevClipPaths;\n    var clipGroupNodeIdx = 0;\n    for (var i = 0; i < listLen; i++) {\n      var displayable = list[i];\n      if (!displayable.invisible) {\n        var clipPaths = displayable.__clipPaths;\n        var len = clipPaths && clipPaths.length || 0;\n        var prevLen = prevClipPaths && prevClipPaths.length || 0;\n        var lca = void 0;\n        for (lca = Math.max(len - 1, prevLen - 1); lca >= 0; lca--) {\n          if (clipPaths && prevClipPaths && clipPaths[lca] === prevClipPaths[lca]) {\n            break;\n          }\n        }\n        for (var i_1 = prevLen - 1; i_1 > lca; i_1--) {\n          clipPathsGroupsStackDepth--;\n          currentClipPathGroup = clipPathsGroupsStack[clipPathsGroupsStackDepth - 1];\n        }\n        for (var i_2 = lca + 1; i_2 < len; i_2++) {\n          var groupAttrs = {};\n          setClipPath(clipPaths[i_2], groupAttrs, scope);\n          var g = createVNode('g', 'clip-g-' + clipGroupNodeIdx++, groupAttrs, []);\n          (currentClipPathGroup ? currentClipPathGroup.children : out).push(g);\n          clipPathsGroupsStack[clipPathsGroupsStackDepth++] = g;\n          currentClipPathGroup = g;\n        }\n        prevClipPaths = clipPaths;\n        var ret = brush(displayable, scope);\n        if (ret) {\n          (currentClipPathGroup ? currentClipPathGroup.children : out).push(ret);\n        }\n      }\n    }\n  };\n  SVGPainter.prototype.resize = function (width, height) {\n    var opts = this._opts;\n    var root = this.root;\n    var viewport = this._viewport;\n    width != null && (opts.width = width);\n    height != null && (opts.height = height);\n    if (root && viewport) {\n      viewport.style.display = 'none';\n      width = getSize(root, 0, opts);\n      height = getSize(root, 1, opts);\n      viewport.style.display = '';\n    }\n    if (this._width !== width || this._height !== height) {\n      this._width = width;\n      this._height = height;\n      if (viewport) {\n        var viewportStyle = viewport.style;\n        viewportStyle.width = width + 'px';\n        viewportStyle.height = height + 'px';\n      }\n      var svgDom = this._svgDom;\n      if (svgDom) {\n        svgDom.setAttribute('width', width);\n        svgDom.setAttribute('height', height);\n      }\n    }\n  };\n  SVGPainter.prototype.getWidth = function () {\n    return this._width;\n  };\n  SVGPainter.prototype.getHeight = function () {\n    return this._height;\n  };\n  SVGPainter.prototype.dispose = function () {\n    if (this.root) {\n      this.root.innerHTML = '';\n    }\n    this._svgDom = this._viewport = this.storage = this._oldVNode = this._bgVNode = this._mainVNode = null;\n  };\n  SVGPainter.prototype.clear = function () {\n    if (this._svgDom) {\n      this._svgDom.innerHTML = null;\n    }\n    this._oldVNode = null;\n  };\n  SVGPainter.prototype.toDataURL = function (base64) {\n    var str = encodeURIComponent(this.renderToString());\n    var prefix = 'data:image/svg+xml;';\n    if (base64) {\n      str = encodeBase64(str);\n      return str && prefix + 'base64,' + str;\n    }\n    return prefix + 'charset=UTF-8,' + str;\n  };\n  return SVGPainter;\n}();\nfunction createMethodNotSupport(method) {\n  return function () {\n    if (process.env.NODE_ENV !== 'production') {\n      logError('In SVG mode painter not support method \"' + method + '\"');\n    }\n  };\n}\nexport default SVGPainter;","map":{"version":3,"names":["brush","setClipPath","createElement","createVNode","vNodeToString","getCssString","createBrushScope","createSVGVNode","normalizeColor","encodeBase64","extend","keys","logError","map","retrieve2","patch","updateAttrs","getSize","svgId","SVGPainter","root","storage","opts","type","refreshHover","createMethodNotSupport","configLayer","_opts","_id","_oldVNode","width","height","ssr","viewport","_viewport","document","style","cssText","svgDom","_svgDom","elm","appendChild","resize","prototype","getType","getViewportRoot","getViewportRootOffset","viewportRoot","offsetLeft","offsetTop","getSvgDom","refresh","vnode","renderToVNode","willUpdate","attrs","renderOneToVNode","el","list","getDisplayList","bgColor","_backgroundColor","_width","_height","scope","animation","compress","children","_a","color","opacity","_bgVNode","x","y","id","fill","push","mainVNode","_mainVNode","_paintList","defs","length","animationCssStr","cssNodes","cssAnims","newline","styleNode","useViewBox","renderToString","cssAnimation","setBackgroundColor","backgroundColor","bgVNode","setAttribute","getSvgRoot","out","listLen","clipPathsGroupsStack","clipPathsGroupsStackDepth","currentClipPathGroup","prevClipPaths","clipGroupNodeIdx","i","displayable","invisible","clipPaths","__clipPaths","len","prevLen","lca","Math","max","i_1","i_2","groupAttrs","g","ret","display","viewportStyle","getWidth","getHeight","dispose","innerHTML","clear","toDataURL","base64","str","encodeURIComponent","prefix","method","process","env","NODE_ENV"],"sources":["/Users/pengsong/Downloads/Web/Vue-Demo/login/node_modules/zrender/lib/svg/Painter.js"],"sourcesContent":["import { brush, setClipPath } from './graphic.js';\nimport { createElement, createVNode, vNodeToString, getCssString, createBrushScope, createSVGVNode } from './core.js';\nimport { normalizeColor, encodeBase64 } from './helper.js';\nimport { extend, keys, logError, map, retrieve2 } from '../core/util.js';\nimport patch, { updateAttrs } from './patch.js';\nimport { getSize } from '../canvas/helper.js';\nvar svgId = 0;\nvar SVGPainter = (function () {\n    function SVGPainter(root, storage, opts) {\n        this.type = 'svg';\n        this.refreshHover = createMethodNotSupport('refreshHover');\n        this.configLayer = createMethodNotSupport('configLayer');\n        this.storage = storage;\n        this._opts = opts = extend({}, opts);\n        this.root = root;\n        this._id = 'zr' + svgId++;\n        this._oldVNode = createSVGVNode(opts.width, opts.height);\n        if (root && !opts.ssr) {\n            var viewport = this._viewport = document.createElement('div');\n            viewport.style.cssText = 'position:relative;overflow:hidden';\n            var svgDom = this._svgDom = this._oldVNode.elm = createElement('svg');\n            updateAttrs(null, this._oldVNode);\n            viewport.appendChild(svgDom);\n            root.appendChild(viewport);\n        }\n        this.resize(opts.width, opts.height);\n    }\n    SVGPainter.prototype.getType = function () {\n        return this.type;\n    };\n    SVGPainter.prototype.getViewportRoot = function () {\n        return this._viewport;\n    };\n    SVGPainter.prototype.getViewportRootOffset = function () {\n        var viewportRoot = this.getViewportRoot();\n        if (viewportRoot) {\n            return {\n                offsetLeft: viewportRoot.offsetLeft || 0,\n                offsetTop: viewportRoot.offsetTop || 0\n            };\n        }\n    };\n    SVGPainter.prototype.getSvgDom = function () {\n        return this._svgDom;\n    };\n    SVGPainter.prototype.refresh = function () {\n        if (this.root) {\n            var vnode = this.renderToVNode({\n                willUpdate: true\n            });\n            vnode.attrs.style = 'position:absolute;left:0;top:0;user-select:none';\n            patch(this._oldVNode, vnode);\n            this._oldVNode = vnode;\n        }\n    };\n    SVGPainter.prototype.renderOneToVNode = function (el) {\n        return brush(el, createBrushScope(this._id));\n    };\n    SVGPainter.prototype.renderToVNode = function (opts) {\n        opts = opts || {};\n        var list = this.storage.getDisplayList(true);\n        var bgColor = this._backgroundColor;\n        var width = this._width;\n        var height = this._height;\n        var scope = createBrushScope(this._id);\n        scope.animation = opts.animation;\n        scope.willUpdate = opts.willUpdate;\n        scope.compress = opts.compress;\n        var children = [];\n        if (bgColor && bgColor !== 'none') {\n            var _a = normalizeColor(bgColor), color = _a.color, opacity = _a.opacity;\n            this._bgVNode = createVNode('rect', 'bg', {\n                width: width,\n                height: height,\n                x: '0',\n                y: '0',\n                id: '0',\n                fill: color,\n                'fill-opacity': opacity\n            });\n            children.push(this._bgVNode);\n        }\n        else {\n            this._bgVNode = null;\n        }\n        var mainVNode = !opts.compress\n            ? (this._mainVNode = createVNode('g', 'main', {}, [])) : null;\n        this._paintList(list, scope, mainVNode ? mainVNode.children : children);\n        mainVNode && children.push(mainVNode);\n        var defs = map(keys(scope.defs), function (id) { return scope.defs[id]; });\n        if (defs.length) {\n            children.push(createVNode('defs', 'defs', {}, defs));\n        }\n        if (opts.animation) {\n            var animationCssStr = getCssString(scope.cssNodes, scope.cssAnims, { newline: true });\n            if (animationCssStr) {\n                var styleNode = createVNode('style', 'stl', {}, [], animationCssStr);\n                children.push(styleNode);\n            }\n        }\n        return createSVGVNode(width, height, children, opts.useViewBox);\n    };\n    SVGPainter.prototype.renderToString = function (opts) {\n        opts = opts || {};\n        return vNodeToString(this.renderToVNode({\n            animation: retrieve2(opts.cssAnimation, true),\n            willUpdate: false,\n            compress: true,\n            useViewBox: retrieve2(opts.useViewBox, true)\n        }), { newline: true });\n    };\n    SVGPainter.prototype.setBackgroundColor = function (backgroundColor) {\n        this._backgroundColor = backgroundColor;\n        var bgVNode = this._bgVNode;\n        if (bgVNode && bgVNode.elm) {\n            var _a = normalizeColor(backgroundColor), color = _a.color, opacity = _a.opacity;\n            bgVNode.elm.setAttribute('fill', color);\n            if (opacity < 1) {\n                bgVNode.elm.setAttribute('fill-opacity', opacity);\n            }\n        }\n    };\n    SVGPainter.prototype.getSvgRoot = function () {\n        return this._mainVNode && this._mainVNode.elm;\n    };\n    SVGPainter.prototype._paintList = function (list, scope, out) {\n        var listLen = list.length;\n        var clipPathsGroupsStack = [];\n        var clipPathsGroupsStackDepth = 0;\n        var currentClipPathGroup;\n        var prevClipPaths;\n        var clipGroupNodeIdx = 0;\n        for (var i = 0; i < listLen; i++) {\n            var displayable = list[i];\n            if (!displayable.invisible) {\n                var clipPaths = displayable.__clipPaths;\n                var len = clipPaths && clipPaths.length || 0;\n                var prevLen = prevClipPaths && prevClipPaths.length || 0;\n                var lca = void 0;\n                for (lca = Math.max(len - 1, prevLen - 1); lca >= 0; lca--) {\n                    if (clipPaths && prevClipPaths\n                        && clipPaths[lca] === prevClipPaths[lca]) {\n                        break;\n                    }\n                }\n                for (var i_1 = prevLen - 1; i_1 > lca; i_1--) {\n                    clipPathsGroupsStackDepth--;\n                    currentClipPathGroup = clipPathsGroupsStack[clipPathsGroupsStackDepth - 1];\n                }\n                for (var i_2 = lca + 1; i_2 < len; i_2++) {\n                    var groupAttrs = {};\n                    setClipPath(clipPaths[i_2], groupAttrs, scope);\n                    var g = createVNode('g', 'clip-g-' + clipGroupNodeIdx++, groupAttrs, []);\n                    (currentClipPathGroup ? currentClipPathGroup.children : out).push(g);\n                    clipPathsGroupsStack[clipPathsGroupsStackDepth++] = g;\n                    currentClipPathGroup = g;\n                }\n                prevClipPaths = clipPaths;\n                var ret = brush(displayable, scope);\n                if (ret) {\n                    (currentClipPathGroup ? currentClipPathGroup.children : out).push(ret);\n                }\n            }\n        }\n    };\n    SVGPainter.prototype.resize = function (width, height) {\n        var opts = this._opts;\n        var root = this.root;\n        var viewport = this._viewport;\n        width != null && (opts.width = width);\n        height != null && (opts.height = height);\n        if (root && viewport) {\n            viewport.style.display = 'none';\n            width = getSize(root, 0, opts);\n            height = getSize(root, 1, opts);\n            viewport.style.display = '';\n        }\n        if (this._width !== width || this._height !== height) {\n            this._width = width;\n            this._height = height;\n            if (viewport) {\n                var viewportStyle = viewport.style;\n                viewportStyle.width = width + 'px';\n                viewportStyle.height = height + 'px';\n            }\n            var svgDom = this._svgDom;\n            if (svgDom) {\n                svgDom.setAttribute('width', width);\n                svgDom.setAttribute('height', height);\n            }\n        }\n    };\n    SVGPainter.prototype.getWidth = function () {\n        return this._width;\n    };\n    SVGPainter.prototype.getHeight = function () {\n        return this._height;\n    };\n    SVGPainter.prototype.dispose = function () {\n        if (this.root) {\n            this.root.innerHTML = '';\n        }\n        this._svgDom =\n            this._viewport =\n                this.storage =\n                    this._oldVNode =\n                        this._bgVNode =\n                            this._mainVNode = null;\n    };\n    SVGPainter.prototype.clear = function () {\n        if (this._svgDom) {\n            this._svgDom.innerHTML = null;\n        }\n        this._oldVNode = null;\n    };\n    SVGPainter.prototype.toDataURL = function (base64) {\n        var str = encodeURIComponent(this.renderToString());\n        var prefix = 'data:image/svg+xml;';\n        if (base64) {\n            str = encodeBase64(str);\n            return str && prefix + 'base64,' + str;\n        }\n        return prefix + 'charset=UTF-8,' + str;\n    };\n    return SVGPainter;\n}());\nfunction createMethodNotSupport(method) {\n    return function () {\n        if (process.env.NODE_ENV !== 'production') {\n            logError('In SVG mode painter not support method \"' + method + '\"');\n        }\n    };\n}\nexport default SVGPainter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}